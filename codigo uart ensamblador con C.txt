#include "p30F3013.h"

//_FOSC(CSW_FSCM_OFF & FRC); 
#pragma config FOSFPR = FRC             // Oscillator (Internal Fast RC (No change to Primary Osc Mode bits))
#pragma config FCKSMEN = CSW_FSCM_OFF   // Clock Switching and Monitor (Sw Disabled, Mon Disabled)
/********************************************************************************/
/* SE DESACTIVA EL WATCHDOG	*/
//_FWDT(WDT_OFF); 
#pragma config WDT = WDT_OFF            // Watchdog Timer (Disabled)
/********************************************************************************/
//_FBORPOR( PBOR_ON & BORV27 & PWRT_16 & MCLR_EN ); 
// FBORPOR
#pragma config FPWRT  = PWRT_16          // POR Timer Value (16ms)
#pragma config BODENV = BORV20           // Brown Out Voltage (2.7V)
#pragma config BOREN  = PBOR_ON          // PBOR Enable (Enabled)
#pragma config MCLRE  = MCLR_EN          // Master Clear Enable (Enabled)
/********************************************************************************/
//_FGS(CODE_PROT_OFF)
// FGS
#pragma config GWRP = GWRP_OFF          // General Code Segment Write Protect (Disabled)
#pragma config GCP = CODE_PROT_OFF      // General Segment Code Protection (Disabled)

/********************************************************************************/
/* SECCION DE DECLARACION DE CONSTANTES CON DEFINE								*/
/********************************************************************************/
#define EVER 1

/********************************************************************************/
/* DECLARACIONES GLOBALES														*/
/********************************************************************************/
/*DECLARACION DE LA ISR DEL TIMER 1 USANDO __attribute__						*/
/********************************************************************************/
void __attribute__((__interrupt__)) _U2RXInterrupt( void );

void setPorts();
void setUART();
void initReception();
void setISRs();

extern void lcd8BitsInit( );
extern void lcdWriteData( short int  );
extern void lcdWriteCommand( short int );
extern void lcdLocateCursor ( short int );
extern void lcdWaitBusyFlag();
extern void lcdPrint( char * );

unsigned short receivedFlag, receivedData, dataCount;
char clock[9];

int main(void) 
{        
    setPorts();
    lcd8BitsInit();
    setUART();
    setISRs();
    initReception();
    for(;EVER;)
    {
        asm("PWRSAV #1");
        if(receivedFlag == 1)
        {
            lcdWaitBusyFlag();
            if(dataCount == 16)
                lcdLocateCursor(40);
            else if(dataCount == 32)
            {
                dataCount = 0;
                lcdLocateCursor(0);
            }
            lcdWriteData(receivedData);
        }
    }
    return 0;
}

void setPorts()
{
    PORTB = 0;
    asm("nop");
    LATB = 0;
    asm("nop");
    TRISB = 0;
    asm("nop");
    ADPCFG = 0XFFFF;
    asm("nop");
    PORTD = 0;              //CLR       PORTD
    asm("nop");             //ENSAMBLADOR EN LINEA
    LATD = 0;               //CLR       LATD
    asm("nop");
    TRISDbits.TRISD8 = 0;   //BCLR TRISD, #TRISD8   E_LCD
    asm("nop");
    PORTF = 0;
    asm("nop");
    LATF = 0;
    asm("nop");
    TRISFbits.TRISF4 = 0;       //RS_LCD
    asm("nop");
    TRISFbits.TRISF5 = 0;       //RW_LCD
    asm("nop");
    PORTC = 0;
    asm("nop");
    LATC = 0;
    asm("nop");
    TRISCbits.TRISC13 = 0;      //TX
    asm("nop");
    TRISCbits.TRISC14 = 1;      //RX
    asm("nop");
}

void setUART()
{
    U1MODE = 0;
    U1MODEbits.ALTIO = 1;
    U1MODEbits.WAKE = 1;
    U1MODEbits.ABAUD = 1;
    U1STA = 0;
    U1STAbits.UTXISEL = 1;
    U1BRG = 11;
}

void setISRs()
{
    IFS0bits.U1RXIF = 0;
    IEC0bits.U1RXIE = 1;
}

void initReception()
{
    receivedFlag = 0;
    receivedData = 0;
    dataCount = 0;
    U1MODEbits.UARTEN = 1;
}

/**  @brief: CONFIGURACION DEL UART 1. EL UART 1 SE COMUNICA CON 
 *           EL FT232 PARA COMUNICACION CON PC
 *   @baudrate: 115200 BAUDIOS
 *   @frame: 8 BITS X DATO, SIN PARIDAD, 1 BIT DE PARO
 */

/********************************************************************************/
/* DESCRICION:	ISR (INTERRUPT SERVICE ROUTINE) DE RECEPCION DEL UART 2			*/
/* LA RUTINA TIENE QUE SER GLOBAL PARA SER UNA ISR								*/	
/* SE USA PUSH.S PARA GUARDAR LOS REGISTROS W0, W1, W2, W3, C, Z, N Y DC EN LOS */
/* REGISTROS SOMBRA																*/
/********************************************************************************/
void __attribute__((__interrupt__, no_auto_psv)) _U2RXInterrupt( void )
{
  
    IFS1bits.U2RXIF = 0;
}
